<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>VERCOM | @ViewBag.Title</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="Inspinia is the #1 best-selling admin dashboard template on Wrapmarket. Perfect for building CRM, CMS, project management tools, and custom web apps with clean UI, responsive design, and powerful features.">
    <meta name="keywords" content="Inspinia, admin dashboard, Wrapmarket, Wrapbootstrap, HTML template, Bootstrap admin, CRM template, CMS template, responsive admin, web app UI, admin theme, best admin template">
    <meta name="author" content="WebAppLayers">
    <!-- App favicon -->
    <link rel="shortcut icon" href="~/Content/images/favicon.ico">
    <!-- Theme Config Js -->
    <script src="~/Scripts/config.js"></script>
    <!-- Vendor css -->
    <link href="~/Content/vendors.min.css" rel="stylesheet" />
    <!-- App css -->
    <link href="~/Content/app.min.css" rel="stylesheet" />
    @if (IsSectionDefined("Styles"))
    {@RenderSection("Styles", required: false)}
</head>
<body>
    <!-- Begin page -->
    <div class="wrapper">
        <!-- Sidenav Menu Start -->
        @Html.Partial("_SideNav")
        <!-- Sidenav Menu End -->
        <!-- Topbar Start -->
        @Html.Partial("_TopBar")
        <!-- Topbar End -->
        <!-- ============================================================== -->
        <!-- Start Main Content -->
        <!-- ============================================================== -->
        <div class="content-page">
            <div id="notificacionesContainer" class="toast-container position-fixed top-0 end-0 p-3"></div>
            <div class="container-fluid">
                @RenderBody()
            </div> <!-- container -->
            <!-- Footer Start -->
            @Html.Partial("_Footer")
            <!-- end  -->
        </div>
        <!-- ============================================================== -->
        <!-- End of Main Content -->
        <!-- ============================================================== -->
    </div>
    <!-- END wrapper -->
    <!-- Theme Settings -->
    @Html.Partial("_Theme")
    <!-- Vendor js -->
    <script src="~/Scripts/vendors.min.js"></script>
    <script src="~/Scripts/plugins/sweetalert/sweetalert2@11.js"></script>
    <!-- App js -->
    <script src="~/Scripts/ajax/ajax.js"></script>
    <script src="~/Scripts/app.js"></script>
    <script src="~/Scripts/jquery-3.7.1.min.js"></script>
    <script src="~/Scripts/jquery.signalR.min.js"></script>
    <script src="/signalr/hubs"></script>
    <script>
        $(document).ready(function () {
            $('#notification-stock').empty();
            const connection = $.hubConnection();
            const hub = connection.createHubProxy('NotificacionesHub');
            hub.on('recibirNotificacionStock', function (titulo, mensaje, tipo) { 
                agregarNotificacionStock(titulo, mensaje, tipo, "Justo ahora")
            });
            hub.on('recibirNotificacion', function (titulo, mensaje, tipo) {
                agregarNotificacion(titulo, mensaje, tipo, "Justo ahora")
            });
            connection.start().done(function () {
                console.log("Conectado al hub");
            });
            function agregarNotificacionStock(titulo, mensaje, tipo, tiempo = "Justo ahora") {
                const id = `notification-${Date.now()}`;
                const iconos = {
                    info: 'info',
                    success: 'check-circle',
                    warning: 'alert-triangle',
                    error: 'alert-circle'
                };

                const color = tipo === 'error' ? 'danger' :
                    tipo === 'warning' ? 'warning' :
                        tipo === 'success' ? 'success' : 'primary';

                const html = `
                      <div class="dropdown-item notification-item py-2 text-wrap fade-in" id="${id}">
                        <span class="d-flex gap-2">
                          <span class="avatar-md flex-shrink-0">
                            <span class="avatar-title bg-${color}-subtle text-${color} rounded fs-22">
                              <i data-lucide="${iconos[tipo] || 'info'}" class="fs-xl"></i>
                            </span>
                          </span>
                          <span class="flex-grow-1 text-muted">
                            <span class="fw-medium text-body">${titulo}</span><br>
                            <span class="fs-xs">${mensaje}</span><br>
                            <span class="fs-xs">${tiempo}</span>
                          </span>
                          <button type="button" class="flex-shrink-0 text-muted btn btn-link p-0" data-dismissible="#${id}">
                            <i data-lucide="x" class="fs-xxl"></i>
                          </button>
                        </span>
                      </div>
                `;                  
                $('#notification-stock').prepend(html);
                lucide.createIcons();               
                actualizarContadorStock();
            }
            function agregarNotificacion(titulo, mensaje, tipo, tiempo = "Justo ahora") {
                const id = `notification-${Date.now()}`;
                const iconos = {
                    info: 'info',
                    success: 'check-circle',
                    warning: 'alert-triangle',
                    error: 'alert-circle'
                };
                const color = tipo === 'error' ? 'danger' :
                    tipo === 'warning' ? 'warning' :
                        tipo === 'success' ? 'success' : 'primary';

                const html = `
                <div class="dropdown-item notification-item py-2 text-wrap fade-in" id="${id}">
                    <span class="d-flex gap-2">
                       <span class="avatar-md flex-shrink-0">
                       <span class="avatar-title bg-${color}-subtle text-${color} rounded fs-22">
                          <i data-lucide="${iconos[tipo] || 'info'}" class="fs-xl"></i>
                       </span>
                        </span>
                     <span class="flex-grow-1 text-muted">
                     <span class="fw-medium text-body">${titulo}</span><br>
                     <span class="fs-xs">${mensaje}</span><br>
                     <span class="fs-xs">${tiempo}</span>
                     </span>
                     <button type="button" class="flex-shrink-0 text-muted btn btn-link p-0" data-dismissible="#${id}">
                       <i data-lucide="x" class="fs-xxl"></i>
                      </button>
                      </span>
                      </div>
                 `;              
                $('#notification').prepend(html);       
                lucide.createIcons(); // 🔥 Esto es clave para renderizar los íconos nuevos
                actualizarContador();
            }
            $(document).on('click', '[data-dismissible]', function () {
                const target = $(this).data('dismissible');
                $(target).remove();
                actualizarContadorStock();
                actualizarContador();
            });
        });

        function actualizarContadorStock() {
            const total = $('#notification-stock .notification-item').length;
            $('#notificationsctock-count').text(total);
            $('#notificationsctock-counttiny').text(`${total} Mensaje(s)`);
        }
        function actualizarContador() {
            const total = $('#notification .notification-item').length;
            $('#notification-count').text(total);
            $('#notification-counttiny').text(`${total} Notificacion(s)`);
        }
    </script>
    @RenderSection("scripts", required: false)
</body>
</html>
