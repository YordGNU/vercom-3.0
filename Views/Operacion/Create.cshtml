@model vercom.Models.operacion
@{
    ViewBag.Title = "AGREGAR OPERACIÓN";
}
<div class="page-title-head d-flex align-items-center">
    <div class="flex-grow-1">
        <h4 class="fs-sm text-uppercase fw-bold m-0">OPERACIONES</h4>
    </div>
    <div class="text-end">
        <ol class="breadcrumb m-0 py-0">
            <li class="breadcrumb-item">
                <a href="javascript: void(0);">VERCOM</a>
            </li>
            <li class="breadcrumb-item">
                <a href="javascript: void(0);">OPERACIONES</a>
            </li>
            <li class="breadcrumb-item active">AGREGAR</li>
        </ol>
    </div>
</div>
<div class="row justify-content-center">
    <div class="col-xxl-12">
        <form id="formOperacion" role="form" method="post" action="@Url.Action("Create", "Operacion")">
            @Html.AntiForgeryToken()
            <div class="row">
                <div class="col-xxl-6">
                    <div class="card">
                        <div class="card-header d-block p-3">
                            <h4 class="card-title mb-1">Datos generales</h4>
                            <p class="text-muted mb-0">
                                Para agregar una nueva operación, proporcione los detalles necesarios en los campos a
                                continuación.
                            </p>
                        </div> <!-- end card-header -->
                        <div class="card-body">
                            <div class="row">
                                <div class="col-lg-4">
                                    <!-- Fecha -->
                                    <div class="mb-3" id="data_1">
                                        <label for="fecha" class="form-label">
                                            Fecha <span class="text-danger">*</span>
                                        </label>
                                        <div class="input-group date">
                                            <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                            <input type="text" name="fecha" id="fecha" class="form-control" required=""
                                                   value="@DateTime.Now.ToString("d")">
                                        </div>
                                        @Html.ValidationMessageFor(model => model.fecha)
                                    </div>
                                </div>
                                <div class="col-lg-8">
                                    <!-- Tipo de Operación -->
                                    <div class="mb-3">
                                        <label for="tipo_operacionid" class="form-label">
                                            Tipo de operación <span class="text-danger">*</span>
                                        </label>
                                        <select class="form-control" name="tipo_operacionid" id="tipo_operacionid"
                                                required="">
                                            <option value="0">Tipo de operación...</option>
                                            @Html.Action("_listoperaciontipo", "Parcial")
                                        </select>
                                        @Html.ValidationMessageFor(model => model.tipo_operacionid)
                                    </div>
                                </div>
                                <div class="col-lg-8">
                                    <!-- Punto de Venta -->
                                    <div class="mb-3">
                                        <label for="punto_ventaid" class="form-label">
                                            Punto de venta <span class="text-danger">*</span>
                                        </label>
                                        <select class="form-control" name="punto_ventaid" id="punto_ventaid"
                                                required="">
                                            <option value="0">Punto de venta...</option>
                                            @Html.Action("_listapuntos", "Parcial")
                                        </select>
                                        @Html.ValidationMessageFor(model => model.punto_ventaid)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <!-- Categoria -->
                                    <div class="mb-3">
                                        <label for="categoria_id" class="form-label">
                                            Categoría <span class="text-danger">*</span>
                                        </label>
                                        <select class="form-control" name="categoria_id" id="categoria_id" required="">
                                            @Html.Action("_listcategorias", "Parcial")
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div> <!-- end card-body-->
                    </div> <!-- end card-->
                </div> <!-- end col-->
                <div class="col-xxl-6" id="bloque_producto">
                    <div class="card">
                        <div class="card-header d-block p-3">
                            <h4 class="card-title mb-1">Información del producto</h4>
                            <p class="text-muted mb-0">
                                Establezca el producto y la cantidad a agregar.
                            </p>
                        </div> <!-- end card-header -->
                        <div class="card-body">
                            <div class="row">
                                <div class="col-lg-8">
                                    <div class="mb-3">
                                        <label for="productoid" class="form-label">
                                            Producto <span class="text-danger">*</span>
                                        </label>
                                        <select class="form-control" id="productoid" name="productoid"
                                                data-choices=""></select>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        <label for="cantidad" class="form-label">
                                            Cantidad <span class="text-danger">*</span>
                                        </label>
                                        <input type="text" class="form-control decimalVAL" id="cantidad" name="cantidad"
                                               step="0.01" placeholder="Cantidad (Ejemplo, 199,99)">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer">
                            <div class="mt-1 mb-2 d-flex gap-2 justify-content-end">
                                <button type="button" class="btn btn-success" id="agregarProducto">
                                    <i data-lucide="arrow-big-down-dash" class="fs-sm me-2"></i> Agregar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xxl-12">
                    <div class="row row-cols-xxl-3 row-cols-md-3 align-items-center g-3" id="bloque-resumen">
                        <div class="col">
                            <div class="card">
                                <div class="card-body">
                                    <h5 title="Sales Today">Cantidad</h5>
                                    <div class="d-flex align-items-center gap-2 my-3">
                                        <div class="avatar-md flex-shrink-0">
                                            <span class="avatar-title text-bg-success rounded-circle fs-22">
                                                <i class="ti ti-premium-rights"></i>
                                            </span>
                                        </div>
                                        <h3 class="mb-0" id="totalCantidad">0,00</h3>
                                    </div>
                                    <p class="mb-0">
                                        <span class="text-success"><i class="ti ti-point-filled"></i></span>
                                        <span class="text-nowrap text-muted">Cantidad (u) total</span>
                                        <span class="float-end"><b id="tlabel_totalCantidad"></b></span>
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="col">
                            <div class="card">
                                <div class="card-body">
                                    <h5 title="Total Products">Importe</h5>
                                    <div class="d-flex align-items-center gap-2 my-3">
                                        <div class="avatar-md flex-shrink-0">
                                            <span class="avatar-title text-bg-primary rounded-circle fs-22">
                                                <i class="ti ti-cash-banknote"></i>
                                            </span>
                                        </div>
                                        <h3 class="mb-0" id="totalImporte">0,00</h3>
                                    </div>
                                    <p class="mb-0">
                                        <span class="text-primary"><i class="ti ti-point-filled"></i></span>
                                        <span class="text-nowrap text-muted">Importe total</span>
                                        <span class="float-end"><b id="tlabel_totalImporte"></b></span>
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="col">
                            <div class="card">
                                <div class="card-body">
                                    <h5 title="Customer Count">Tipo de pago</h5>
                                    <div class="d-flex align-items-center gap-2 my-3">
                                        <div class="avatar-md flex-shrink-0">
                                            <span class="avatar-title text-bg-info rounded-circle fs-22">
                                                <i class="ti ti-cash"></i>
                                            </span>
                                        </div>
                                        <h3 class="mb-0" id="totalImpEfectivo">0,00</h3>
                                        <div class="avatar-md flex-shrink-0">
                                            <span class="avatar-title text-bg-info rounded-circle fs-22">
                                                <i class="ti ti-credit-card-pay"></i>
                                            </span>
                                        </div>
                                        <h3 class="mb-0" id="totalImpTransferencia">0,00</h3>
                                    </div>
                                    <p class="mb-0">
                                        <span class="text-info"><i class="ti ti-point-filled"></i></span>
                                        <span class="text-nowrap text-muted"> Efectivo </span>
                                        <span class="badge badge-soft-info fw-medium ms-2 fs-xs ms-auto"
                                              id="label_cantEfectivo"></span>
                                        <span class="text-nowrap text-muted"> Transferencia </span>
                                        <span class="badge badge-soft-warning fw-medium ms-2 fs-xs ms-auto"
                                              id="label_cantTransferencia"></span>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xxl-12">
                    <div class="card" data-table="" data-table-rows-per-page="100" id="dtableOperaciones">
                        <div class="card-header border-light justify-content-between">
                            <div class="d-flex gap-2">
                                <div class="app-search">
                                    <input data-table-search="" type="search" class="form-control" placeholder="Buscar por nombre...">
                                    <i data-lucide="search" class="app-search-icon text-muted"></i>
                                </div>
                            </div>
                            <div class="d-flex align-items-center gap-2">
                                <!-- Records Per Page -->
                                <div>
                                    <select data-table-set-rows-per-page="" class="form-select form-control my-1 my-md-0">
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                        <option value="150">150</option>
                                        <option value="200">200</option>
                                    </select>
                                </div>
                            </div>
                            <div class="d-flex gap-1">
                                <button class="btn btn-success btn-icon" id="btnExportExcel">
                                    <i data-lucide="file-spreadsheet" class="fs-lg"></i>
                                </button>
                                <button class="btn btn-info btn-icon" id="btnPrint">
                                    <i data-lucide="printer" class="fs-lg"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <table id="tablaProductos"
                                       class="table table-custom table-centered table-select table-hover w-100 mb-0">
                                    <thead class="thead-sm text-uppercase fs-xxs">
                                        <tr class="text-uppercase fs-xxs">
                                            <th data-table-sort="" data-column="producto">PRODUCTO</th>
                                            <th data-table-sort="" data-column="saldo">SALDO</th>
                                            <th data-table-sort="" data-column="cantidad">CANT.</th>
                                            <th data-table-sort="" data-column="tpago">T.PAGO</th>
                                            <th data-table-sort="" data-column="rest">REST.</th>
                                            <th data-table-sort="" data-column="precio">PRECIO</th>
                                            <th data-table-sort="" data-column="importe">IMPORTE</th>
                                            <th>ACCIONES</th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                        </div>
                        <div class="card-footer border-0">
                            <div class="d-flex justify-content-between align-items-center">
                                <div data-table-pagination-info="entradas"></div>
                                <div data-table-pagination=""></div>
                            </div>
                            <div class="mt-2 mb-2 d-flex gap-2 justify-content-end">
                                <a href="@Url.Action("Index")" class="btn btn-soft-dark">
                                    <i data-lucide="arrow-big-left-dash" class="fs-xxl me-2"></i> Regresar
                                </a>
                                <button type="submit" class="btn btn-success">
                                    <i data-lucide="save" class="fs-sm me-2"></i> Guardar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div> <!-- end row-->
        </form>
    </div> <!-- end col-->
</div>
@section Styles {
    <link href="~/Content/plugins/toastr/toastr.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/daterangepicker/daterangepicker.css" rel="stylesheet" /> 
    <link href="~/Content/plugins/chosen/bootstrap-chosen.css" rel="stylesheet" /> 
}

@section Scripts {
    <script src="~/Scripts/plugins/toastr/toastr.min.js"></script>
    <script src="~/Scripts/plugins/moment/moment.min.js"></script>
    <script src="~/Scripts/plugins/daterangepicker/daterangepicker.js"></script>
    <script src="~/Scripts/plugins/chosen/chosen.jquery.min.js"></script>
    <script src="~/Scripts/custom-table.js"></script>
    <script>
        $(document).ready(function () {
            window.customTable = new CustomTable();
            let index = 0;
            const formato = 'DD/MM/YYYY';
            const selectProductos = document.getElementById('productoid');

            $(selectProductos).chosen({
                disable_search_threshold: 0, // Habilita búsqueda siempre
                no_results_text: "Producto no encontrado",
                placeholder_text_single: "Seleccione un producto",
                search_contains: true, // Permite buscar en cualquier parte del texto
                allow_single_deselect: true // Permite quitar selección si es select único
            });

            $('#fecha').daterangepicker({
                startDate: moment().startOf('month'),
                endDate: moment().endOf('month'),
                singleDatePicker: true,
                showDropdowns: true,
                autoUpdateInput: true,
                cancelClass: "btn-light",
                applyButtonClasses: "btn-success",
                opens: 'left',
                locale: {
                    format: formato,
                    separator: ' - ',
                    applyLabel: 'Aplicar',
                    cancelLabel: 'Cancelar',
                    fromLabel: 'Desde',
                    toLabel: 'Hasta',
                    customRangeLabel: 'Personalizado',
                    daysOfWeek: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sa'],
                    monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
                        'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
                    firstDay: 1
                }
            }, function (start) {
                $('#fecha').val(start.format(formato));
            });

            $('#fecha').on('change', function () {
                $("#punto_ventaid").val("0");
                $("#tipo_operacionid").val("0");
                $("#totalImporte").text("0"); // ← corregido: textContent no aplica en jQuery

                limpiarTablaProductos();

                // Limpiar opciones del select
                const $select = $('#productoid');
                // Eliminar todas las opciones excepto la primera (placeholder)
                $select.find('option:not(:first)').remove();
                // Resetear el valor del select
                $select.val('').trigger('chosen:updated');
            });

            $('#tipo_operacionid').on('change', function () {
                $("#punto_ventaid").val("0");
                $("#totalImporte").text("0"); // ← corregido: textContent no aplica en jQuery

                limpiarTablaProductos();

                // Limpiar opciones del select
                const $select = $('#productoid');
                // Eliminar todas las opciones excepto la primera (placeholder)
                $select.find('option:not(:first)').remove();
                // Resetear el valor del select
                $select.val('').trigger('chosen:updated');
            });

            $('#punto_ventaid').on('change', function () {
                const url = '@Url.Action("_productoSaldoXpuntoXfechaXcateg", "Parcial")';
                const fecha = $("#fecha").val();
                const categoria = $("#categoria_id").val();
                const operTipo = $("#tipo_operacionid").val();
                const option = $("#punto_ventaid").val();

                activarOverlayEnContenedor('#bloque_producto');

                $.getJSON(url, { id: option, tipo: operTipo, fecha: fecha, categ: categoria }, function (data) {
                    limpiarTablaProductos();
                    const $select = $('#productoid');
                    $select.empty(); // Elimina todas las opciones
                    // Agrega el placeholder
                    $select.append('<option value="">Seleccione un producto</option>');
                    // Agrega las nuevas opciones
                    data.forEach(item => {
                        const texto = `${item.cod} ${item.nombre}`;
                        const optionHTML = `<option value="${item.id}" data-precio="${item.precio}" data-cantidad="${item.cant_saldo}">${texto}</option>`;
                        $select.append(optionHTML);
                    });
                    // Actualiza Chosen visualmente
                    $select.trigger('chosen:updated');
                    desactivarOverlayEnContenedor('#bloque_producto');
                });
            });

            $('#categoria_id').on('change', function () {
                var url = '@Url.Action("_productosXpuntoFilCategoria", "Parcial")';
                var fecha = $("#fecha").val();
                var categoria = $("#categoria_id").val();
                var operTipo = $("#tipo_operacionid").val();
                var option = $("#punto_ventaid").val();

                activarOverlayEnContenedor('#bloque_producto');
                $.getJSON(url, { id: option, tipo: operTipo, fecha: fecha, categ: categoria }, function (data) {
                    limpiarTablaProductos();
                    const $select = $('#productoid');
                    $select.empty(); // Elimina todas las opciones
                    // Agrega el placeholder
                    $select.append('<option value="">Seleccione un producto</option>');
                    // Agrega las nuevas opciones con atributos personalizados
                    data.forEach(item => {
                        const texto = `${item.cod} ${item.nombre}`;
                        const optionHTML = `<option value="${item.id}" data-precio="${item.precio}" data-cantidad="${item.cant_saldo}">${texto}</option>`;
                        $select.append(optionHTML);
                    });
                    // Refresca Chosen visualmente
                    $select.val('').trigger('chosen:updated');
                    desactivarOverlayEnContenedor('#bloque_producto');
                });
            });

            $("#agregarProducto").on('click', function () {
                const tipoOperacion = $("#tipo_operacionid").val();
                const $select = $("#productoid");
                const productoID = $select.val();

                if (!productoID || productoID === "0") {
                    alert("Seleccione un producto y agregue una cantidad válida.");
                    return;
                }

                const $option = $select.find(`option[value='${productoID}']`);
                const productoNombre = $option.text();
                const precioUnitario = parseFloat($option.data("precio")) || 0;
                const EnPunto = parseFloat($option.data("cantidad")) || 0;
                const nuevaCantidad = parseFloat($("#cantidad").val()) || 0;
                const ESTADO = (tipoOperacion === "2") ? "" : "disabled";

                const $filaExistente = productoYaExiste(productoID, 1);
                const $filasProducto = productoExisteEnTabla(productoID);

                if ($filaExistente.length > 0) {
                    const $inputCantidad = $filaExistente.find("input[id*='.Cantidad']");
                    const cantidadActual = parseFloat($inputCantidad.val()) || 0;
                    const nuevaCantidadTotal = cantidadActual + nuevaCantidad;
                    $inputCantidad.val(nuevaCantidadTotal.toFixed(2));
                    actualizarImporte($inputCantidad[0]);
                } else {
                    const Restante = (tipoOperacion === "1" || tipoOperacion === "5")
                        ? (EnPunto + nuevaCantidad).toFixed(2)
                        : (EnPunto - nuevaCantidad).toFixed(2);

                    const importeTotal = (nuevaCantidad * precioUnitario).toFixed(2);

                    const fila = crearFilaProducto(index, productoID, productoNombre, EnPunto, nuevaCantidad, precioUnitario, Restante, importeTotal, ESTADO);
                    $("#tablaProductos tbody").append(fila);

                    if ($filasProducto.length > 0) {
                        const $inputCantidad = $filasProducto.find("input[id*='.Cantidad']");
                        const cantidadActual = parseFloat($inputCantidad.val()) || 0;
                        $inputCantidad.val(cantidadActual.toFixed(2));
                        actualizarImporte($inputCantidad[0]);
                    }

                    fila.querySelector(".cantidadProducto").addEventListener("input", function () {
                        actualizarImporte(this);
                    });

                    fila.querySelector(".tipoPagoSelect").addEventListener("change", function () {
                        calcularImporteTotal();
                        calcularCantidadTotal();
                    });

                    if (parseFloat(Restante) < 0) {
                        fila.classList.add("bg-danger");
                    }

                    index++;
                }

                calcularImporteTotal();
                calcularCantidadTotal();
                refreshTable();
                $("#cantidad").val("");
            });

            $("#formOperacion").on("submit", function (e) {
                const hayError = $("#tablaProductos tbody tr.bg-danger").length > 0;
                if (hayError) {
                    e.preventDefault(); // ⛔ Evita el envío
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'No puedes enviar el formulario: hay productos con cantidad restante negativa.'
                    });
                    return false;
                }
                $(".decimalVAL").each(function () {
                    var valor = $(this).val().replace(".", ",");
                    $(this).val(valor);
                });

                @*const operacion = {
                    fecha: $('#fecha').val(), // formato dd/MM/yyyy o según cultura
                    tipo_operacionid: parseInt($('#tipo_operacionid').val()),
                    punto_ventaid: parseInt($('#punto_ventaid').val()),
                    categoria_id: parseInt($('#categoria_id').val())
                };
                const productos = obtenerProductos(); // ← esta función debe devolver un array válido
                console.log(operacion, productos);
                $.ajax({
                    url: '@Url.Action("Create", "Operacion")',
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify({
                        operacion: operacion,
                        productos: productos
                    }),
                    success: function (response) {
                        if (response.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Operación agregada',
                                text: 'Operación agregada correctamente.',
                                timer: 2000,
                                showConfirmButton: false
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: '¡Error!',
                                text: response.message
                            });
                        }
                    },
                    error: function () {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Hubo un problema al enviar el formulario.'
                        });
                    }
                });*@
            });
        });

        $(document).on("click", ".eliminarProducto", function () {
            // Eliminar la fila del DOM
            const fila = this.closest("tr");
            if (fila) fila.remove();

            // Reindexar todos los inputs con nombre 'productos[#]'
            const filas = document.querySelectorAll("#tablaProductos tbody tr");
            filas.forEach((row, i) => {
                row.querySelectorAll("input[name^='productos'], select[name^='productos']").forEach(input => {
                    const name = input.getAttribute("name");
                    if (name) {
                        const nuevoNombre = name.replace(/\[\d+\]/, `[${i}]`);
                        input.setAttribute("name", nuevoNombre);
                    }
                });
            });

            // Actualizar índice global y total
            index = filas.length;
            calcularImporteTotal();
            calcularCantidadTotal();
        });
        function activarOverlayEnContenedor(contenedorID) {
            const contenedor = document.querySelector(contenedorID);
            if (!contenedor) return;

            const cards = contenedor.querySelectorAll('.card');
            cards.forEach(card => {
                let overlay = card.querySelector('.card-overlay');
                if (!overlay) {
                    overlay = document.createElement('div');
                    overlay.classList.add(
                        'card-overlay',
                        'position-absolute',
                        'top-0',
                        'start-0',
                        'w-100',
                        'h-100',
                        'd-flex',
                        'justify-content-center',
                        'align-items-center',
                        'noExport'
                    );

                    overlay.style.zIndex = '10';
                    const spinner = document.createElement('div');
                    spinner.classList.add('spinner-border', 'text-primary');
                    spinner.setAttribute('role', 'status');
                    const label = document.createElement('span');
                    label.classList.add('visually-hidden');
                    label.textContent = 'Cargando...';
                    spinner.appendChild(label);
                    overlay.appendChild(spinner);
                    card.appendChild(overlay);
                }

                overlay.style.display = 'flex';
                $(overlay).hide().fadeIn(200);
            });
        }
        function desactivarOverlayEnContenedor(contenedorID) {
            const contenedor = document.querySelector(contenedorID);
            if (!contenedor) return;
            const overlays = contenedor.querySelectorAll('.card .card-overlay');
            overlays.forEach(overlay => {
                $(overlay).fadeOut(200, () => overlay.remove());
            });
        }
        function productoYaExiste(productoID, tipoPagoID) {
            return $("#tablaProductos tbody tr").filter(function () {
                const id = $(this).find("input[name*='.ProductoID']").val();
                const pago = $(this).find("select[name*='.TipoPagoID']").val();
                return parseInt(id) === parseInt(productoID) && parseInt(pago) === tipoPagoID;
            });
        }
        function productoExisteEnTabla(productoID) {
            return $("#tablaProductos tbody tr").filter(function () {
                const id = $(this).find("input[name*='.ProductoID']").val();
                return parseInt(id) === parseInt(productoID);
            });
        }
        function crearFilaProducto(index, productoID, productoNombre, EnPunto, cantidad, precioUnitario, Restante, importeTotal, ESTADO) {

            const fila = document.createElement("tr");
            fila.dataset.id = productoID;
            fila.innerHTML = `
                    <td>
                    ${productoNombre}
                    <input type="hidden" id="productos[${index}].ProductoID" name="productos[${index}].ProductoID" value="${productoID}" />
                    </td>
                    <td>
                    ${EnPunto}
                    <input type="text" class="decimalVAL" name="productos[${index}].EnPunto" value="${EnPunto}" step="0.01" style="display:none" />
                    </td>
                    <td>
                    <input type="text" class="form-control decimalVAL cantidadProducto"  id="productos[${index}].Cantidad" name="productos[${index}].Cantidad" value="${cantidad}" step="0.01" required="">
                    </td>
                    <td>
                    <select class="form-control tipoPagoSelect" id="productos[${index}].TipoPagoID" name="productos[${index}].TipoPagoID" ${ESTADO}>
                    @Html.Action("_listtipopago", "Parcial")
                    </select>
                    </td>
                    <td>
                    <span class="Restante">${Restante}</span>
                    <input type="text" class="decimalVAL" name="productos[${index}].Restante" value="${Restante}" step="0.01" style="display:none" />
                    </td>
                    <td>
                    ${precioUnitario}
                    <input type="text" class="decimalVAL" name="productos[${index}].PrecioUnitario" value="${precioUnitario}" step="0.01" style="display:none" />
                    </td>
                    <td>
                    <span class="importeProducto">${importeTotal}</span>
                    <input type="text" class="decimalVAL Importe" name="productos[${index}].Importe" value="${importeTotal}" step="0.01" style="display:none" />
                    </td>
                    <td>
                    <div class="d-flex justify-content-center gap-1">
                    <a href="#" class="btn btn-light btn-icon btn-sm rounded-circle eliminarProducto">
                    <i class="ti ti-trash fs-lg"></i>
                    </a>
                    </div>
                    </td>`;
            return fila;
        }
        function obtenerProductos() {
            const lista = [];
            $('#tablaProductos tbody tr').each(function () {
                const $fila = $(this);
                const productoID = parseInt($fila.data('id'));
                const cantidad = parseFloat($fila.find('input[name*=".Cantidad"]').val()?.replace(",", "."));
                const Restante = parseFloat($fila.find('input[name*=".Restante"]').val()?.replace(",", "."));
                const EnPunto = parseFloat($fila.find('input[name*=".EnPunto"]').val()?.replace(",", "."));
                const precioUnitario = parseFloat($fila.find('input[name*=".PrecioUnitario"]').val()?.replace(",", "."));
                const importe = parseFloat($fila.find('input[name*=".Importe"]').val()?.replace(",", "."));
                const tipoPagoID = parseInt($fila.find('select[name*=".TipoPagoID"]').val());
                if (!productoID || isNaN(cantidad)) return; // Evita registros inválidos
                lista.push({
                    ProductoID: productoID,
                    Cantidad: cantidad,
                    CantidadRestante: Restante,
                    CantidadEnPuntoVenta: EnPunto,
                    PrecioUnitario: precioUnitario,
                    Importe: importe,
                    TipoPagoID: tipoPagoID
                });
            });

            return lista;
        }
        function actualizarImporte(elemento) {
            const tipoOperacion = document.getElementById("tipo_operacionid").value;
            const fila = elemento.closest("tr");
            const cantidad = parseFloat(elemento.value) || 0;

            // Accede directamente a las celdas por índice
            const precioUnitario = parseFloat(fila.cells[5].textContent) || 0;
            const EnPunto = parseFloat(fila.cells[1].textContent) || 0;

            // Calcular importe individual
            const importeTotal = (cantidad * precioUnitario).toFixed(2);

            // Actualizar elementos dentro de la fila actual
            const inputImporte = fila.querySelector("input[name*='.Importe']");
            const spanImporte = fila.querySelector(".importeProducto");

            if (inputImporte) inputImporte.value = importeTotal;
            if (spanImporte) spanImporte.textContent = importeTotal;

            // 🔍 Obtener ProductoID desde la fila
            const productoID = fila.querySelector("input[name*='.ProductoID']")?.value;

            if (!productoID) return;

            // 🔁 Recalcular cantidad total vendida (efectivo + transferencia)
            let cantidadTotalVendida = 0;

            const filasProducto = document.querySelectorAll(`#tablaProductos tbody tr`);
            filasProducto.forEach(f => {
                const id = f.querySelector("input[name*='.ProductoID']")?.value;
                const tipoPago = f.querySelector("input[name*='.TipoPagoID']")?.value;
                const cantidadFila = parseFloat(f.querySelector(".cantidadProducto")?.value) || 0;
                fila.querySelector(".cantidadProducto")?.value || 0;


                if (id === productoID) {
                    cantidadTotalVendida += cantidadFila;
                }
            });

            // ➖ Calcular nueva cantidad restante
            const nuevaRestante = (tipoOperacion === "1" || tipoOperacion === "5")
                ? (EnPunto + cantidadTotalVendida).toFixed(2)
                : (EnPunto - cantidadTotalVendida).toFixed(2);

            // 🔁 Actualizar todas las filas con ese ProductoID
            filasProducto.forEach(f => {
                const id = f.querySelector("input[name*='.ProductoID']")?.value;
                if (id === productoID) {
                    const inputRestante = f.querySelector("input[name*='.Restante']");
                    const spanRestante = f.querySelector(".Restante");
                    if (inputRestante) inputRestante.value = nuevaRestante;
                    if (spanRestante) spanRestante.textContent = nuevaRestante;
                    if (parseFloat(nuevaRestante) < 0) {
                        f.classList.add("bg-danger");
                    } else {
                        f.classList.remove("bg-danger");
                    }
                }
            });

            // 🔁 Recalcular totales generales
            calcularImporteTotal();
            calcularCantidadTotal();
        }
        function calcularImporteTotal() {
            let total = 0;
            let importeEfectivo = 0;
            let importeTranferencia = 0;

            const filas = document.querySelectorAll("#tablaProductos tbody tr");
            var operTipo = document.querySelector("#tipo_operacionid").value;

            filas.forEach(fila => {
                const contieneSinDatos = Array.from(fila.querySelectorAll("td")).some(td =>
                    td.textContent.trim() === "Sin datos…."
                );
                if (contieneSinDatos) return; // Ignora esta fila

                const textoImporte = fila.querySelector(".importeProducto")?.textContent || "0";
                const tipoPago = fila.querySelector(".tipoPagoSelect")?.value || 0;

                if (tipoPago === "1" && operTipo === "2") importeEfectivo += parseFloat(textoImporte) || 0;
                if (tipoPago === "2" && operTipo === "2") importeTranferencia += parseFloat(textoImporte) || 0;

                total += parseFloat(textoImporte) || 0;
            });

            document.getElementById("totalImporte").textContent = total.toFixed(2);
            document.getElementById("totalImpEfectivo").textContent = importeEfectivo.toFixed(2);
            document.getElementById("totalImpTransferencia").textContent = importeTranferencia.toFixed(2);
        }
        function calcularCantidadTotal() {
            let total = 0;
            let importeEfectivo = 0;
            let importeTranferencia = 0;

            const filas = document.querySelectorAll("#tablaProductos tbody tr");
            var operTipo = document.querySelector("#tipo_operacionid").value;

            filas.forEach(fila => {
                const contieneSinDatos = Array.from(fila.querySelectorAll("td")).some(td =>
                    td.textContent.trim() === "Sin datos…."
                );
                if (contieneSinDatos) return; // Ignora esta fila

                const textoCantidad = fila.querySelector(".cantidadProducto")?.value || 0;
                const tipoPago = fila.querySelector(".tipoPagoSelect")?.value || 0;

                if (tipoPago === "1" && operTipo === "2") importeEfectivo += parseFloat(textoCantidad) || 0;
                if (tipoPago === "2" && operTipo === "2") importeTranferencia += parseFloat(textoCantidad) || 0;

                total += parseFloat(textoCantidad) || 0;
            });

            document.getElementById("totalCantidad").textContent = total;
            document.getElementById("label_cantEfectivo").textContent = importeEfectivo;
            document.getElementById("label_cantTransferencia").textContent = importeTranferencia;
        }
        function refreshTable() {
            // 1. Localiza <table> y su instancia
            const tableEl = document.querySelector('[data-table]');
            const instance = window.customTable.tables.find(t => t.table === tableEl);
            const tbody = tableEl.querySelector("tbody");

            // 2. Obtiene todos los <tr> del <tbody>
            const allRows = Array.from(tbody.querySelectorAll("tr"));

            // 3. Filtra los <tr> que NO contienen un <td> con "Sin datos…."
            const filteredRows = allRows.filter(tr => {
                return !Array.from(tr.querySelectorAll("td")).some(td =>
                    td.textContent.trim() === "Sin datos..."
                );
            });
            // 4. Dispara fullRefresh con los <tr> válidos
            instance.fullRefresh(filteredRows);
        }
        function limpiarTablaProductos() {
            document.getElementById("totalImporte").textContent = "0,00";
            document.getElementById("totalImpEfectivo").textContent = "";
            document.getElementById("totalImpTransferencia").textContent = "";
            document.getElementById("totalCantidad").textContent = "0,00";
            document.getElementById("label_cantEfectivo").textContent = "";
            document.getElementById("label_cantTransferencia").textContent = "";
            const tableEl = document.querySelector('[data-table]');
            const instance = window.customTable.tables.find(t => t.table === tableEl);
            const tbody = tableEl.querySelector("tbody");
            tbody.innerHTML = "";
            const allRows = Array.from(tbody.querySelectorAll("tr"));
            instance.fullRefresh(allRows);
        }
    </script>
}
